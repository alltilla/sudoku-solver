package sudoku

import (
	"bytes"
	"fmt"
	"strconv"
	"strings"
)

func validateFormat(input string, format string) error {
	if len(input) != len(format) {
		return fmt.Errorf("input and format have different lengths. input length: %d, format length: %d", len(input), len(format))
	}

	for i := 0; i < len(format); i++ {
		expected_char := format[i]
		actual_char := input[i]

		if expected_char == '?' {
			continue
		}

		if expected_char != actual_char {
			return fmt.Errorf("invalid character. expected: %c, actual: %c", expected_char, actual_char)
		}
	}

	return nil
}

func validateFrame(pretty_string string) error {
	frame := strings.TrimSpace(`
##=======================##=======================##=======================##
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
||-------+-------+-------||-------+-------+-------||-------+-------+-------||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
||-------+-------+-------||-------+-------+-------||-------+-------+-------||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
##=======================##=======================##=======================##
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
||-------+-------+-------||-------+-------+-------||-------+-------+-------||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
||-------+-------+-------||-------+-------+-------||-------+-------+-------||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
##=======================##=======================##=======================##
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
||-------+-------+-------||-------+-------+-------||-------+-------+-------||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
||-------+-------+-------||-------+-------+-------||-------+-------+-------||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
|| ????? | ????? | ????? || ????? | ????? | ????? || ????? | ????? | ????? ||
|| ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? || ? ? ? | ? ? ? | ? ? ? ||
##=======================##=======================##=======================##
`)

	return validateFormat(pretty_string, frame)
}

func createCellPrettyString(pretty_string string, row_offset int, column_offset int) (string, error) {
	row_length := len("##=======================##=======================##=======================##\n")

	var cell_pretty_string bytes.Buffer

	for i := 0; i < 3; i++ {
		for j := 0; j < 5; j++ {
			char_index := (row_offset+i)*row_length + column_offset + j
			if err := cell_pretty_string.WriteByte(pretty_string[char_index]); err != nil {
				return "", err
			}
		}

		if err := cell_pretty_string.WriteByte('\n'); err != nil {
			return "", err
		}
	}

	return cell_pretty_string.String(), nil
}

func getValueFromCellPrettyString(cell_pretty_string string) (int, error) {
	value_cell_format := `
     
 (?) 
     
`[1:]

	if err := validateFormat(cell_pretty_string, value_cell_format); err != nil {
		return -1, err
	}

	value, err := strconv.Atoi(string(cell_pretty_string[8]))
	if err != nil {
		return -1, err
	}

	return value, nil
}

func getPencilMarksFromCellPrettyString(cell_pretty_string string) ([]int, error) {
	pencil_mark_cell_format := `
? ? ?
? ? ?
? ? ?
`[1:]

	pencil_marks := []int{}

	if err := validateFormat(cell_pretty_string, pencil_mark_cell_format); err != nil {
		return pencil_marks, err
	}

	expected_number := 0

	for i := 0; i < len(pencil_mark_cell_format); i++ {
		if pencil_mark_cell_format[i] != '?' {
			continue
		}

		expected_number++

		char := cell_pretty_string[i]
		if char == ' ' {
			continue
		}

		parsed_number, err := strconv.Atoi(string(char))
		if err != nil {
			return pencil_marks, err
		}

		if parsed_number != expected_number {
			return pencil_marks, fmt.Errorf("unexpected pencil mark. expected: %d, actual: %d", expected_number, parsed_number)
		}

		pencil_marks = append(pencil_marks, parsed_number)
	}

	return pencil_marks, nil
}

func deserializeCellPrettyString(cell_pretty_string string, cell *Cell) error {
	// Try as value
	value, err := getValueFromCellPrettyString(cell_pretty_string)
	if err == nil {
		if err := cell.SetValue(value); err != nil {
			return err
		}
		return nil
	}

	// Try as pencil mark
	pencil_marks, err := getPencilMarksFromCellPrettyString(cell_pretty_string)
	if err == nil {
		if add_pencil_mark_err := cell.AddPencilMarks(pencil_marks); add_pencil_mark_err != nil {
			return add_pencil_mark_err
		}
		return nil
	}

	return err
}

func (g *Grid) deserializeGridPrettyString(pretty_string string) error {
	row_offsets := [9]int{1, 5, 9, 13, 17, 21, 25, 29, 33}
	column_offsets := [9]int{3, 11, 19, 28, 36, 44, 53, 61, 69}

	for i, row_offset := range row_offsets {
		for j, column_offset := range column_offsets {
			row := i + 1
			column := j + 1

			cell, err := g.GetCell(row, column)
			if err != nil {
				panic(err.Error())
			}

			cell_pretty_string, err := createCellPrettyString(pretty_string, row_offset, column_offset)
			if err != nil {
				return err
			}

			if err := deserializeCellPrettyString(cell_pretty_string, cell); err != nil {
				return err
			}
		}
	}

	return nil
}
